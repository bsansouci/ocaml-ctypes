{
  "name": "ctypes",
  "description": "ctypes is a library for binding to C libraries using pure OCaml.  The primary aim is to make writing C extensions as straightforward as possible.",
  "dependencies": {
    "libffi": "bsansouci/libffi#bsb-support"
  },
  "peerDependencies": {
    "esy/ocaml#esy": ">= 4.01.0"
  },
  "readme": "ctypes is a library for binding to C libraries using pure OCaml.  The primary aim is to make writing C extensions as straightforward as possible.\n\nThe core of ctypes is a set of combinators for describing the structure of C types -- numeric types, arrays, pointers, structs, unions and functions.  You can use these combinators to describe the types of the functions that you want to call, then bind directly to those functions -- all without writing or generating any C!\n\n[![Travis build Status](https://travis-ci.org/ocamllabs/ocaml-ctypes.svg?branch=master)](https://travis-ci.org/ocamllabs/ocaml-ctypes) [![AppVeyor build status](https://ci.appveyor.com/api/projects/status/n5geenq8sinlptfv/branch/master?svg=true)](https://ci.appveyor.com/project/yallop/ocaml-ctypes/branch/master) \n\n## Usage\n\nSuppose you want to bind to the following C functions:\n\n```C\n   int sigemptyset(sigset_t *set);\n   int sigfillset(sigset_t *set);\n   int sigaddset(sigset_t *set, int signum);\n   int sigdelset(sigset_t *set, int signum);\n   int sigismember(const sigset_t *set, int signum);\n```\n\nUsing ctypes you can describe the interfaces to these functions as follows:\n\n```OCaml\n   let sigemptyset = foreign \"sigemptyset\" (ptr sigset_t @-> returning int)\n   let sigfillset = foreign \"sigfillset\" (ptr sigset_t @-> returning int)\n   let sigaddset = foreign \"sigaddset\" (ptr sigset_t @-> int @-> returning int)\n   let sigdelset = foreign \"sigdelset\" (ptr sigset_t @-> int @-> returning int)\n   let sigismember = foreign \"sigismember\" (ptr sigset_t @-> int @-> returning int)\n```\n\nThe names bound by this code have the types you might expect:\n\n```OCaml\n   val sigemptyset : sigset_t ptr -> int\n   val sigfillset : sigset_t ptr -> int\n   val sigaddset : sigset_t ptr -> int -> int\n   val sigdelset : sigset_t ptr -> int -> int\n   val sigismember : sigset_t ptr -> int -> int\n```\n\nThat's all there is to it.  Unlike the [usual way](http://caml.inria.fr/pub/docs/manual-ocaml/intfc.html) of writing C extensions, there are no C \"stub\" functions to write, so there's much less opportunity for error.\n\nThe documentation and source distribution contain more complex examples, involving structs, unions, arrays, callback functions, and so on, and show how to create and use C values (like instances of `sigset_t ptr`) in OCaml.\n\n## Links\n\n* [Chapter 19: Foreign Function Interface][rwo-19] of [Real World OCaml][rwo] describes ctypes\n* [Modular Foreign Function Bindings][mirage-blogpost] introduces ctypes in the context of the [Mirage][mirage] library operating system\n* [Tutorial][tutorial]\n* [API documentation][apidoc]\n* [Mailing list][mailing-list]\n* [Type-safe C bindings using ocaml-ctypes and stub generation][sjb-cstubs-post] introduces the [Cstubs][cstubs] interface\n* [Using Cstubs_structs][orbitz-cstubs_structs] shows how to use the [`Cstubs_structs`][cstubs_structs] module to reliably determine data layout\n* [Declarative foreign function binding through generic programming][flops-paper] is a research paper that presents the design of ctypes.\n  [A modular foreign function interface][flops-extended] is a draft of an extended version.\n* [FAQ][faq]\n\n[rwo-19]: https://realworldocaml.org/v1/en/html/foreign-function-interface.html\n[rwo]: http://realworldocaml.org/\n[mirage-blogpost]: http://openmirage.org/blog/modular-foreign-function-bindings\n[tutorial]: https://github.com/ocamllabs/ocaml-ctypes/wiki/ctypes-tutorial\n[apidoc]: http://ocamllabs.github.io/ocaml-ctypes\n[mailing-list]: http://lists.ocaml.org/listinfo/ctypes\n[faq]: https://github.com/ocamllabs/ocaml-ctypes/wiki/FAQ\n[mirage]: http://openmirage.org\n[sjb-cstubs-post]: http://simonjbeaumont.com/posts/ocaml-ctypes/\n[cstubs]: https://github.com/ocamllabs/ocaml-ctypes/blob/master/src/cstubs/cstubs.mli\n[orbitz-cstubs_structs]: https://github.com/ocamllabs/ocaml-ctypes/blob/master/examples/cstubs_structs/README.md\n[cstubs_structs]: http://ocamllabs.github.io/ocaml-ctypes/Cstubs_structs.html\n[flops-paper]: http://www.cl.cam.ac.uk/~jdy22/papers/declarative-foreign-function-binding-through-generic-programming.pdf\n[flops-extended]: http://www.cl.cam.ac.uk/~jdy22/papers/a-modular-foreign-function-interface.pdf\n",
  "readmeFilename": "README.md",
  "scripts": {
    "postinstall": "make XEN=${mirage_xen_enable:-disable} libffi.config && touch libffi.config && make XEN=${mirage_xen_enable:-disable} ctypes-base ctypes-stubs && make XEN=${mirage_xen_enable:-disable} ctypes-foreign"
  },
  "version": "0.9.2"
}
